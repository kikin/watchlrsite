<?xml version="1.0" encoding="utf-8"?>
<s:VideoPlayer xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:watchlr="com.watchlr.*" mediaPlayerStateChange="onStateChange(event)"
			   bytesLoadedChange="onBytesLoadedChange(event)" complete="onComplete(event)"
			   currentTimeChange="onCurrentTimeChange(event)" creationComplete="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.watchlr.Globals;
			
			import flash.external.*;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import org.osmf.events.LoadEvent;
			import org.osmf.events.MediaPlayerStateChangeEvent;
			import org.osmf.events.TimeEvent;
			
				//point beyond seek target that we would like to buffer
				//video before we start playback (a percentage)
				protected var SEEK_BUFFER_PADDING:Number = 20;
			
				//we'll need to fetch this from the api whenever the embed's
				//source is modified
				[bindable]
				protected var _seekTarget:Number = 0;
			
				public function set seekTarget(value:Number):void{
					_seekTarget = value;
					ExternalInterface.call(Globals.JS_SIGNATURES.SEEK_START);
				}
			
				protected function init():void{
				
				}
			
				public function onStateChange(event:MediaPlayerStateChangeEvent):void{
					switch(event.state){
						case "ready":
							handleVideoReady();
							break;
						case "paused":
							handleVideoPaused();
							break;
					}
				}
			
				protected function onBytesLoadedChange(event:LoadEvent):void{
					if(!playing){
						var bytesLoaded:Number = event.bytes;
						var totalBytes:Number = event.target.bytesTotal;
						if(totalBytes > 0){
							var percent:Number = Math.floor(100 * (bytesLoaded/
																	totalBytes));
							if (percent + SEEK_BUFFER_PADDING > 100){
								if(_seekTarget && 100*(duration/_seekTarget) > percent){
									seek(_seekTarget);
									ExternalInterface.call(Globals.JS_SIGNATURES.SEEK_END);
									play();
								}
							}
							else if(_seekTarget && 100*(duration/_seekTarget) > (percent + SEEK_BUFFER_PADDING)){
								seek(_seekTarget);
								ExternalInterface.call(Globals.JS_SIGNATURES.SEEK_END);
								play();
							}
						}
					}
					bytesLoadedJSCallbackWrapper(event);
				}
			
				protected function handleVideoReady():void{
					pause();
					ExternalInterface.call(Globals.JS_SIGNATURES.ON_PLAYER_READY);
				}
			
				//here you go, ExternalInterface!
				public function setSeekTarget(value:Number):void{
					seekTarget = value;
				}
			
				public function getDuration():Number{
					return duration;
				}
			
				public function getCurrentTime():Number{
					return currentTime;
				}
			
				protected function onComplete(event:TimeEvent):void{
					ExternalInterface.call(Globals.JS_SIGNATURES.ON_ENDED);
				}
			
				protected function onCurrentTimeChange(event:TimeEvent):void{
					ExternalInterface.call(Globals.JS_SIGNATURES.ON_CURRENT_TIME_CHANGE, currentTime);
				}
			
				//so containing js code can know # bytes loaded....
				protected function bytesLoadedJSCallbackWrapper(event:LoadEvent):void{
					ExternalInterface.call(Globals.JS_SIGNATURES.LOAD_PROGRESS, event.bytes, event.target.bytesTotal); 
				}
			
				protected function handleVideoPaused():void{
					Globals.JS_SIGNATURES.ON_PAUSED;	
				}
			
		]]>
	</fx:Script>
</s:VideoPlayer>
